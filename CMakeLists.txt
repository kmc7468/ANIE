cmake_minimum_required(VERSION 3.8.0)
project(ANIE CXX)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(INCLUDE_DIR "./include")
set(SOURCE_DIR "./src")
set(OUTPUT_DIR "./bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR})

set(DYNAMIC_LINKING OFF CACHE BOOL "")

set(OPENCL_INCLUDE "" CACHE PATH "")
set(OPENCL_LIBRARY "" CACHE PATH "")
set(BOOST_INCLUDE "" CACHE PATH "")
set(BOOST_CHRONO_LIBRARY "" CACHE PATH "")

include_directories(${INCLUDE_DIR})
file(GLOB_RECURSE SOURCE_LIST ${SOURCE_DIR}/*.cpp)

add_definitions(-DANIE_INTERNAL)

if(${DYNAMIC_LINKING})
	add_definitions(-DANIE_DYNAMIC)
	add_library(${PROJECT_NAME} SHARED ${SOURCE_LIST})
else()
	add_library(${PROJECT_NAME} STATIC ${SOURCE_LIST})
endif()

if("${OPENCL_INCLUDE}" STREQUAL "")
	find_package(OpenCL REQUIRED)
	if(NOT ${OpenCL_FOUND})
		message(FATAL_ERROR "Failed to find OpenCL. Please set the OPENCL_INCLUDE and OPENCL_LIBRARY variables.")
	endif()
	include_directories(${OpenCL_INCLUDE_DIRS})
	target_link_libraries(${PROJECT_NAME} ${OpenCL_LIBRARIES})
else()
	include_directories(${OPENCL_INCLUDE})
	target_link_libraries(${OPENCL_LIBRARY})
endif()

if("${BOOST_INCLUDE}" STREQUAL "")
	find_package(Boost REQUIRED COMPONENTS compute chrono)
	if(NOT ${Boost_FOUND})
		message(FATAL_ERROR "Failed to find boost. Please set the BOOST_INCLUDE variable.")
	endif()
	include_directories(${Boost_INCLUDE_DIRS})
	target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
else()
	include_directories(${BOOST_INCLUDE})
	target_link_libraries(${PROJECT_NAME} ${BOOST_CHRONO_LIBRARY})
endif()

install(DIRECTORY ${INCLUDE_DIR}/anie DESTINATION include)
install(TARGETS ${PROJECT_NAME} DESTINATION lib)